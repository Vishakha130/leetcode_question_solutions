//Longest Palindromic Subsequence
class Solution {
     static int lcs(String s1,String s2,int n,int m)
    {
        int [][] dp=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j]=0;
                }
            }
        }
         for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s1.charAt(i-1)==s2.charAt(j-1))
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        return dp[n][m];
    }
    public int longestPalindromeSubseq(String s) {
        StringBuilder stringBuilder = new StringBuilder(s);
        stringBuilder.reverse();

        // Convert the reversed StringBuilder back to a String
        String b = stringBuilder.toString();
        int n=s.length();
        int m=b.length();
        return lcs(s,b,n,m);
    }
}
//Time Complexity:O(n^2)
//Space Complexity:O(n^2)
